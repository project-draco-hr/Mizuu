{
  shareFilenames();
  for (int i=0; i < mMovieStructures.size(); i++) {
    if (mCancel)     return;
    if (!mIgnoreNfoFiles)     continue;
    MovieStructure ms=mMovieStructures.get(i);
    ms.setCustomTags(mIgnoredTags);
    mImdbMap.put(i,ms.hasImdbId());
  }
  MovieApiService service=MizuuApplication.getMovieService(mContext);
  for (  MovieStructure ms : mMovieStructures) {
    if (mCancel)     return;
    mCount++;
    if (!mIgnoreNfoFiles) {
      boolean match=true;
      String nfo1=ms.getFilepath().replaceAll("part[1-9]|cd[1-9]","").trim();
      String nfo2=MizLib.convertToGenericNfo(ms.getFilepath());
      if (mNfoFiles.containsKey(nfo1)) {
        new NfoMovie(ms.getFilepath(),mNfoFiles.get(nfo1),mContext,mCallback,mCount);
      }
 else       if (mNfoFiles.containsKey(nfo2)) {
        new NfoMovie(ms.getFilepath(),mNfoFiles.get(nfo2),mContext,mCallback,mCount);
      }
 else {
        match=false;
      }
      if (match)       continue;
    }
    Movie movie=null;
    List<Movie> results=new ArrayList<Movie>();
    if (!overrideMovieId()) {
      if (ms.hasImdbId()) {
        results=service.searchByImdbId(ms.getImdbId(),null);
      }
      if (results.size() == 0) {
        int year=ms.getReleaseYear();
        if (year >= 0)         results=service.search(ms.getDecryptedFilename(),String.valueOf(year),null);
      }
      if (results.size() == 0)       results=service.search(ms.getDecryptedFilename(),null);
      if (results.size() == 0) {
        int year=ms.getReleaseYear();
        if (year >= 0)         results=service.search(ms.getDecryptedParentFolderName(),String.valueOf(year),null);
      }
      if (results.size() == 0)       results=service.search(ms.getDecryptedParentFolderName(),null);
    }
 else {
      movie=service.get(getMovieId(),mLocale);
    }
    if (!overrideMovieId() && results.size() > 0) {
      movie=service.get(results.get(0).getId(),mLocale);
    }
    if (movie == null)     movie=new Movie();
    createMovie(ms,movie);
  }
}
