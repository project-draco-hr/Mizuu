{
  TMDbMovie movie=new TMDbMovie();
  movie.setId(id);
  if (id.equals("invalid"))   return movie;
  try {
    String baseUrl=PreferenceManager.getDefaultSharedPreferences(c).getString(TMDB_BASE_URL,MizLib.TMDB_BASE_URL);
    JSONObject jObject=null;
    if (json != null)     jObject=new JSONObject(json);
 else     jObject=MizLib.getJSONObject("https://api.themoviedb.org/3/movie/" + id + "?api_key="+ MizLib.TMDB_API+ (language.equals("en") ? "" : "&language=" + language)+ "&append_to_response=releases,trailers,casts,images");
    movie.setTitle(MizLib.getStringFromJSONObject(jObject,"title",""));
    movie.setPlot(MizLib.getStringFromJSONObject(jObject,"overview",""));
    movie.setImdbId(MizLib.getStringFromJSONObject(jObject,"imdb_id",""));
    movie.setRating(MizLib.getStringFromJSONObject(jObject,"vote_average","0.0"));
    movie.setTagline(MizLib.getStringFromJSONObject(jObject,"tagline",""));
    movie.setReleasedate(MizLib.getStringFromJSONObject(jObject,"release_date",""));
    movie.setRuntime(MizLib.getStringFromJSONObject(jObject,"runtime","0"));
    if (!language.equals("en")) {
      JSONObject englishResults=MizLib.getJSONObject("https://api.themoviedb.org/3/movie/" + id + "?api_key="+ MizLib.TMDB_API+ "&language=en&append_to_response=releases");
      if (movie.getTitle().isEmpty())       movie.setTitle(MizLib.getStringFromJSONObject(englishResults,"title",""));
      if (movie.getPlot().isEmpty())       movie.setPlot(MizLib.getStringFromJSONObject(englishResults,"overview",""));
      if (movie.getTagline().isEmpty())       movie.setTagline(MizLib.getStringFromJSONObject(englishResults,"tagline",""));
      if (movie.getRating().equals("0.0"))       movie.setRating(MizLib.getStringFromJSONObject(englishResults,"vote_average","0.0"));
      if (movie.getReleasedate().isEmpty())       movie.setReleasedate(MizLib.getStringFromJSONObject(englishResults,"release_date",""));
      if (movie.getRuntime().equals("0"))       movie.setRuntime(MizLib.getStringFromJSONObject(englishResults,"runtime","0"));
    }
    try {
      movie.setCover(baseUrl + MizLib.getImageUrlSize(c) + jObject.getString("poster_path"));
    }
 catch (    Exception e) {
    }
    try {
      movie.setCollectionTitle(jObject.getJSONObject("belongs_to_collection").getString("name"));
      movie.setCollectionId(jObject.getJSONObject("belongs_to_collection").getString("id"));
    }
 catch (    Exception e) {
    }
    if (!movie.getCollectionId().isEmpty() && json == null) {
      JSONObject collection=MizLib.getJSONObject("https://api.themoviedb.org/3/collection/" + movie.getCollectionId() + "/images?api_key="+ MizLib.TMDB_API);
      JSONArray array=collection.getJSONArray("posters");
      if (array.length() > 0)       movie.setCollectionImage(baseUrl + MizLib.getImageUrlSize(c) + array.getJSONObject(0).getString("file_path"));
    }
    try {
      String genres="";
      for (int i=0; i < jObject.getJSONArray("genres").length(); i++)       genres=genres + jObject.getJSONArray("genres").getJSONObject(i).getString("name") + ", ";
      movie.setGenres(genres.substring(0,genres.length() - 2));
    }
 catch (    Exception e) {
    }
    try {
      if (jObject.getJSONObject("trailers").getJSONArray("youtube").length() > 0)       movie.setTrailer("http://www.youtube.com/watch?v=" + jObject.getJSONObject("releases").getJSONArray("youtube").getJSONObject(0).getString("source"));
    }
 catch (    Exception e) {
    }
    try {
      for (int i=0; i < jObject.getJSONObject("releases").getJSONArray("countries").length(); i++) {
        JSONObject jo=jObject.getJSONObject("releases").getJSONArray("countries").getJSONObject(i);
        if (jo.getString("iso_3166_1").equalsIgnoreCase("us") || jo.getString("iso_3166_1").equalsIgnoreCase(language))         movie.setCertification(jo.getString("certification"));
      }
    }
 catch (    Exception e) {
    }
    try {
      String cast="";
      JSONArray array=jObject.getJSONObject("casts").getJSONArray("cast");
      for (int i=0; i < array.length(); i++) {
        cast+=array.getJSONObject(i).getString("name") + "|";
      }
      if (cast.endsWith("|"))       cast=cast.substring(0,cast.length() - 1);
      movie.setCast(cast);
    }
 catch (    Exception e) {
    }
    try {
      JSONArray array=jObject.getJSONObject("images").getJSONArray("backdrops");
      if (array.length() > 0) {
        movie.setBackdrop(baseUrl + MizLib.getBackdropUrlSize(c) + array.getJSONObject(0).getString("file_path"));
      }
 else {
        if (json == null)         try {
          jObject=MizLib.getJSONObject("https://api.themoviedb.org/3/movie/" + id + "/images?api_key="+ MizLib.TMDB_API);
          JSONArray array2=jObject.getJSONArray("backdrops");
          if (array2.length() > 0) {
            movie.setBackdrop(baseUrl + MizLib.getBackdropUrlSize(c) + array2.getJSONObject(0).getString("file_path"));
          }
        }
 catch (        Exception e) {
        }
      }
    }
 catch (    Exception e) {
    }
    if (ratingsProvider.equals(c.getString(R.string.ratings_option_2)) && json == null) {
      try {
        jObject=MizLib.getJSONObject("http://api.trakt.tv/movie/summary.json/" + MizLib.TRAKT_API + "/"+ id);
        double rating=Double.valueOf(MizLib.getStringFromJSONObject(jObject.getJSONObject("ratings"),"percentage","0")) / 10;
        if (rating > 0 || movie.getRating().equals("0.0"))         movie.setRating(String.valueOf(rating));
      }
 catch (      Exception e) {
      }
    }
    if (ratingsProvider.equals(c.getString(R.string.ratings_option_3)) && json == null) {
      try {
        jObject=MizLib.getJSONObject("http://www.omdbapi.com/?i=" + movie.getImdbId());
        double rating=Double.valueOf(MizLib.getStringFromJSONObject(jObject,"imdbRating","0"));
        if (rating > 0 || movie.getRating().equals("0.0"))         movie.setRating(String.valueOf(rating));
      }
 catch (      Exception e) {
      }
    }
  }
 catch (  Exception e) {
  }
  return movie;
}
