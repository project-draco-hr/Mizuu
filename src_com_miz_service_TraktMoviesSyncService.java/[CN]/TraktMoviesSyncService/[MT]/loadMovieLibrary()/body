{
  mMovieDatabase=MizuuApplication.getMovieAdapter();
  Cursor cursor=mMovieDatabase.fetchAllMovies(DbAdapterMovies.KEY_TITLE + " ASC",false);
  ColumnIndexCache cache=new ColumnIndexCache();
  try {
    while (cursor.moveToNext()) {
      mTmdbIds.add(cursor.getString(cache.getColumnIndex(cursor,DbAdapterMovies.KEY_TMDB_ID)));
      mMovies.add(new Movie(this,cursor.getString(cache.getColumnIndex(cursor,DbAdapterMovies.KEY_TITLE)),cursor.getString(cache.getColumnIndex(cursor,DbAdapterMovies.KEY_PLOT)),cursor.getString(cache.getColumnIndex(cursor,DbAdapterMovies.KEY_TAGLINE)),cursor.getString(cache.getColumnIndex(cursor,DbAdapterMovies.KEY_TMDB_ID)),cursor.getString(cache.getColumnIndex(cursor,DbAdapterMovies.KEY_IMDB_ID)),cursor.getString(cache.getColumnIndex(cursor,DbAdapterMovies.KEY_RATING)),cursor.getString(cache.getColumnIndex(cursor,DbAdapterMovies.KEY_RELEASEDATE)),cursor.getString(cache.getColumnIndex(cursor,DbAdapterMovies.KEY_CERTIFICATION)),cursor.getString(cache.getColumnIndex(cursor,DbAdapterMovies.KEY_RUNTIME)),cursor.getString(cache.getColumnIndex(cursor,DbAdapterMovies.KEY_TRAILER)),cursor.getString(cache.getColumnIndex(cursor,DbAdapterMovies.KEY_GENRES)),cursor.getString(cache.getColumnIndex(cursor,DbAdapterMovies.KEY_FAVOURITE)),cursor.getString(cache.getColumnIndex(cursor,DbAdapterMovies.KEY_ACTORS)),MizuuApplication.getCollectionsAdapter().getCollection(cursor.getString(cache.getColumnIndex(cursor,DbAdapterMovies.KEY_COLLECTION_ID))),cursor.getString(cache.getColumnIndex(cursor,DbAdapterMovies.KEY_COLLECTION_ID)),cursor.getString(cache.getColumnIndex(cursor,DbAdapterMovies.KEY_TO_WATCH)),cursor.getString(cache.getColumnIndex(cursor,DbAdapterMovies.KEY_HAS_WATCHED)),cursor.getString(cache.getColumnIndex(cursor,DbAdapterMovies.KEY_DATE_ADDED)),false));
    }
  }
 catch (  Exception e) {
  }
 finally {
    cursor.close();
    cache.clear();
  }
}
