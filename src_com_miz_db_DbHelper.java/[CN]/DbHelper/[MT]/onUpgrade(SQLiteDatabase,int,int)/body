{
  Log.d("Mizuu","Upgrading database...");
  if (oldVersion == 4) {
    ArrayList<ContentValues> mOldValues=new ArrayList<ContentValues>();
    String[] oldColumns=new String[]{"filepath","coverpath","title","plot","tmdbid","imdbid","rating","tagline","release","certification","runtime","trailer","genres","favourite","watched","collection","to_watch","has_watched","extra1","extra2"};
    Cursor cursor=database.query(DbAdapter.DATABASE_TABLE,oldColumns,null,null,null,null,null);
    try {
      while (cursor.moveToNext()) {
        String filepath=cursor.getString(cursor.getColumnIndex("filepath"));
        String title=cursor.getString(cursor.getColumnIndex("title"));
        String plot=cursor.getString(cursor.getColumnIndex("plot"));
        String tmdbId=cursor.getString(cursor.getColumnIndex("tmdbid"));
        String imdbId=cursor.getString(cursor.getColumnIndex("imdbid"));
        String rating=cursor.getString(cursor.getColumnIndex("rating"));
        String tagline=cursor.getString(cursor.getColumnIndex("tagline"));
        String releaseDate=cursor.getString(cursor.getColumnIndex("release"));
        String certification=cursor.getString(cursor.getColumnIndex("certification"));
        String runtime=cursor.getString(cursor.getColumnIndex("runtime"));
        String trailer=cursor.getString(cursor.getColumnIndex("trailer"));
        String genres=cursor.getString(cursor.getColumnIndex("genres"));
        String favourite=cursor.getString(cursor.getColumnIndex("favourite"));
        String cast=cursor.getString(cursor.getColumnIndex("watched"));
        String collection=cursor.getString(cursor.getColumnIndex("collection"));
        String collectionId=cursor.getString(cursor.getColumnIndex("extra2"));
        String toWatch=cursor.getString(cursor.getColumnIndex("to_watch"));
        String hasWatched=cursor.getString(cursor.getColumnIndex("has_watched"));
        String dateAdded=cursor.getString(cursor.getColumnIndex("extra1"));
        ContentValues values=new ContentValues();
        values.put(DbAdapterMovieMapping.KEY_FILEPATH,filepath);
        values.put(DbAdapter.KEY_TMDB_ID,tmdbId);
        values.put(DbAdapter.KEY_TITLE,title);
        values.put(DbAdapter.KEY_PLOT,plot);
        values.put(DbAdapter.KEY_IMDB_ID,imdbId);
        values.put(DbAdapter.KEY_RATING,rating);
        values.put(DbAdapter.KEY_TAGLINE,tagline);
        values.put(DbAdapter.KEY_RELEASEDATE,releaseDate);
        values.put(DbAdapter.KEY_CERTIFICATION,certification);
        values.put(DbAdapter.KEY_RUNTIME,runtime);
        values.put(DbAdapter.KEY_TRAILER,trailer);
        values.put(DbAdapter.KEY_GENRES,genres);
        values.put(DbAdapter.KEY_FAVOURITE,favourite);
        values.put(DbAdapter.KEY_ACTORS,cast);
        values.put(DbAdapter.KEY_COLLECTION,collection);
        values.put(DbAdapter.KEY_TO_WATCH,toWatch);
        values.put(DbAdapter.KEY_HAS_WATCHED,hasWatched);
        values.put(DbAdapter.KEY_DATE_ADDED,dateAdded);
        values.put(DbAdapter.KEY_COLLECTION_ID,collectionId);
        mOldValues.add(values);
      }
    }
 catch (    Exception e) {
    }
 finally {
      if (cursor != null)       cursor.close();
    }
    database.execSQL("DROP TABLE IF EXISTS movie");
    onCreate(database);
    DbAdapterMovieMapping dbMapping=MizuuApplication.getMovieMappingAdapter();
    for (    ContentValues values : mOldValues) {
      if (!movieExists(database,values.getAsString(DbAdapter.KEY_TMDB_ID))) {
        ContentValues contentValues=new ContentValues();
        contentValues.put(DbAdapter.KEY_TMDB_ID,values.getAsString(DbAdapter.KEY_TMDB_ID).isEmpty() ? values.getAsString(DbAdapterMovieMapping.KEY_FILEPATH) : values.getAsString(DbAdapter.KEY_TMDB_ID));
        contentValues.put(DbAdapter.KEY_TITLE,values.getAsString(DbAdapter.KEY_TITLE));
        contentValues.put(DbAdapter.KEY_PLOT,values.getAsString(DbAdapter.KEY_PLOT));
        contentValues.put(DbAdapter.KEY_IMDB_ID,values.getAsString(DbAdapter.KEY_IMDB_ID));
        contentValues.put(DbAdapter.KEY_RATING,values.getAsString(DbAdapter.KEY_RATING));
        contentValues.put(DbAdapter.KEY_TAGLINE,values.getAsString(DbAdapter.KEY_TAGLINE));
        contentValues.put(DbAdapter.KEY_RELEASEDATE,values.getAsString(DbAdapter.KEY_RELEASEDATE));
        contentValues.put(DbAdapter.KEY_CERTIFICATION,values.getAsString(DbAdapter.KEY_CERTIFICATION));
        contentValues.put(DbAdapter.KEY_RUNTIME,values.getAsString(DbAdapter.KEY_RUNTIME));
        contentValues.put(DbAdapter.KEY_TRAILER,values.getAsString(DbAdapter.KEY_TRAILER));
        contentValues.put(DbAdapter.KEY_GENRES,values.getAsString(DbAdapter.KEY_GENRES));
        contentValues.put(DbAdapter.KEY_FAVOURITE,values.getAsString(DbAdapter.KEY_FAVOURITE));
        contentValues.put(DbAdapter.KEY_ACTORS,values.getAsString(DbAdapter.KEY_ACTORS));
        contentValues.put(DbAdapter.KEY_COLLECTION,values.getAsString(DbAdapter.KEY_COLLECTION));
        contentValues.put(DbAdapter.KEY_TO_WATCH,values.getAsString(DbAdapter.KEY_TO_WATCH));
        contentValues.put(DbAdapter.KEY_HAS_WATCHED,values.getAsString(DbAdapter.KEY_HAS_WATCHED));
        contentValues.put(DbAdapter.KEY_DATE_ADDED,values.getAsString(DbAdapter.KEY_DATE_ADDED));
        contentValues.put(DbAdapter.KEY_COLLECTION_ID,values.getAsString(DbAdapter.KEY_COLLECTION_ID));
        database.insert(DbAdapter.DATABASE_TABLE,null,contentValues);
      }
      dbMapping.createFilepathMapping(values.getAsString(DbAdapterMovieMapping.KEY_FILEPATH),values.getAsString(DbAdapter.KEY_TMDB_ID).isEmpty() ? values.getAsString(DbAdapterMovieMapping.KEY_FILEPATH) : values.getAsString(DbAdapter.KEY_TMDB_ID));
    }
  }
 else {
    database.execSQL("DROP TABLE IF EXISTS movie");
    onCreate(database);
  }
}
