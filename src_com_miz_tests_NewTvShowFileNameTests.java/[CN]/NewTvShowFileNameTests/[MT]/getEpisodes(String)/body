{
  ArrayList<Episode> episodes=new ArrayList<Episode>();
  Pattern pattern=Pattern.compile(mNamingConvention1,Pattern.CASE_INSENSITIVE);
  Matcher matcher=pattern.matcher(filename);
  while (matcher.find()) {
    String before=matcher.group(1);
    int season=getInteger(matcher.group(2));
    int episode=getInteger(matcher.group(3));
    String after=matcher.group(4);
    episodes.add(new Episode(season,episode,before,after));
    if (!after.isEmpty()) {
      Pattern p=Pattern.compile(mMultiPart,Pattern.CASE_INSENSITIVE);
      Matcher m=p.matcher(after);
      if (after.matches("^[-_EeXx]+[^sS].*")) {
        while (m.find()) {
          episode=getInteger(m.group(1));
          episodes.add(new Episode(season,episode,before,after));
        }
      }
 else {
        p=Pattern.compile(mNamingConvention1Multi,Pattern.CASE_INSENSITIVE);
        m=p.matcher(after);
        while (m.find()) {
          season=getInteger(m.group(1));
          episode=getInteger(m.group(2));
          episodes.add(new Episode(season,episode,before,after));
        }
      }
    }
  }
  if (episodes.size() > 0)   return episodes;
  pattern=Pattern.compile(mNamingConvention2,Pattern.CASE_INSENSITIVE);
  matcher=pattern.matcher(filename);
  while (matcher.find()) {
    String before=matcher.group(1);
    int season=1;
    int episode=getInteger(matcher.group(2));
    String after=matcher.group(3);
    episodes.add(new Episode(season,episode,before,after));
    if (!after.isEmpty()) {
      Pattern p=Pattern.compile(mNamingConvention2Multi,Pattern.CASE_INSENSITIVE);
      Matcher m=p.matcher(after);
      if (after.matches(".*" + mNamingConvention2Multi + ".*")) {
        m=p.matcher(after);
        while (m.find()) {
          episode=getInteger(m.group(1));
          episodes.add(new Episode(season,episode,before,after));
        }
      }
 else {
        p=Pattern.compile(mMultiPart,Pattern.CASE_INSENSITIVE);
        m=p.matcher(after);
        while (m.find()) {
          episode=getInteger(m.group(1));
          episodes.add(new Episode(season,episode,before,after));
        }
      }
    }
  }
  if (episodes.size() > 0)   return episodes;
  pattern=Pattern.compile(mNamingConvention3,Pattern.CASE_INSENSITIVE);
  matcher=pattern.matcher(filename);
  while (matcher.find()) {
    String before=matcher.group(1);
    int season=getInteger(matcher.group(2));
    int episode=getInteger(matcher.group(3));
    String after=matcher.group(4);
    episodes.add(new Episode(season,episode,before,after));
    if (!after.isEmpty()) {
      Pattern p=Pattern.compile(mNamingConvention3Multi,Pattern.CASE_INSENSITIVE);
      Matcher m=p.matcher(after);
      if (after.matches(".*" + mNamingConvention3Multi + ".*")) {
        while (m.find()) {
          season=getInteger(m.group(1));
          episode=getInteger(m.group(2));
          episodes.add(new Episode(season,episode,before,after));
        }
      }
 else {
        p=Pattern.compile(mMultiPart,Pattern.CASE_INSENSITIVE);
        m=p.matcher(after);
        while (m.find()) {
          episode=getInteger(m.group(1));
          episodes.add(new Episode(season,episode,before,after));
        }
      }
    }
  }
  if (episodes.size() > 0)   return episodes;
  pattern=Pattern.compile(mNamingConvention4,Pattern.CASE_INSENSITIVE);
  matcher=pattern.matcher(filename);
  if (matcher.find()) {
    int season=0, episode=0;
    String before=matcher.group(1);
    String group=matcher.group(2);
    String after=matcher.group(3);
switch (group.length()) {
case 3:
      season=getInteger(group.substring(0,1));
    episode=getInteger(group.substring(1,3));
  break;
case 4:
season=getInteger(group.substring(0,2));
episode=getInteger(group.substring(2,4));
break;
case 5:
season=getInteger(group.substring(0,2));
episode=getInteger(group.substring(2,5));
break;
case 6:
season=getInteger(group.substring(0,3));
episode=getInteger(group.substring(3,6));
break;
case 7:
season=getInteger(group.substring(0,4));
episode=getInteger(group.substring(4,7));
break;
}
episodes.add(new Episode(season,episode,before,after));
}
if (episodes.size() > 0) return episodes;
return episodes;
}
