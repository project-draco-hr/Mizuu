{
  View v=inflater.inflate(R.layout.image_grid_fragment,container,false);
  mProgressBar=(ProgressBar)v.findViewById(R.id.progress);
  mEmptyLibraryLayout=v.findViewById(R.id.empty_library_layout);
  mEmptyLibraryTitle=(TextView)v.findViewById(R.id.empty_library_title);
  mEmptyLibraryTitle.setTypeface(TypefaceUtils.getRobotoCondensedRegular(mContext));
  mEmptyLibraryDescription=(TextView)v.findViewById(R.id.empty_library_description);
  mEmptyLibraryDescription.setTypeface(TypefaceUtils.getRobotoLight(mContext));
  mAdapter=new LoaderAdapter(mContext);
  mGridView=(ObservableGridView)v.findViewById(R.id.gridView);
  mGridView.setAdapter(mAdapter);
  mGridView.setColumnWidth(mImageThumbSize);
  mGridView.setOnItemClickListener(new OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> arg0,    View arg1,    int arg2,    long arg3){
      viewMovieDetails(arg2,arg1);
    }
  }
);
  if (getArguments().getInt("type") != MovieLoader.COLLECTIONS) {
    mGridView.setChoiceMode(GridView.CHOICE_MODE_MULTIPLE_MODAL);
    mGridView.setMultiChoiceModeListener(new AbsListView.MultiChoiceModeListener(){
      @Override public void onItemCheckedStateChanged(      ActionMode mode,      int position,      long id,      boolean checked){
        mAdapter.setItemChecked(position,checked);
        mode.setTitle(String.format(getString(R.string.selected),mAdapter.getCheckedItemCount()));
      }
      @Override public boolean onCreateActionMode(      ActionMode mode,      Menu menu){
        getActivity().getMenuInflater().inflate(R.menu.movie_library_cab,menu);
        return true;
      }
      @Override public boolean onPrepareActionMode(      ActionMode mode,      Menu menu){
        return false;
      }
      @Override public boolean onActionItemClicked(      ActionMode mode,      MenuItem item){
        int id=item.getItemId();
switch (id) {
case R.id.movie_add_fav:
          MovieDatabaseUtils.setMoviesFavourite(mContext,mAdapter.getCheckedMovies(),true);
        break;
case R.id.movie_remove_fav:
      MovieDatabaseUtils.setMoviesFavourite(mContext,mAdapter.getCheckedMovies(),false);
    break;
case R.id.movie_watched:
  MovieDatabaseUtils.setMoviesWatched(mContext,mAdapter.getCheckedMovies(),true);
break;
case R.id.movie_unwatched:
MovieDatabaseUtils.setMoviesWatched(mContext,mAdapter.getCheckedMovies(),false);
break;
case R.id.add_to_watchlist:
MovieDatabaseUtils.setMoviesWatchlist(mContext,mAdapter.getCheckedMovies(),true);
break;
case R.id.remove_from_watchlist:
MovieDatabaseUtils.setMoviesWatchlist(mContext,mAdapter.getCheckedMovies(),false);
break;
}
if (!(id == R.id.watched_menu || id == R.id.watchlist_menu || id == R.id.favorite_menu)) {
mode.finish();
LocalBroadcastUtils.updateMovieLibrary(mContext);
}
return true;
}
@Override public void onDestroyActionMode(ActionMode mode){
mAdapter.clearCheckedItems();
}
}
);
}
mMovieLoader=new MovieLoader(mContext,MovieLibraryType.fromInt(getArguments().getInt("type")),mCallback);
mMovieLoader.load();
showProgressBar();
return v;
}
