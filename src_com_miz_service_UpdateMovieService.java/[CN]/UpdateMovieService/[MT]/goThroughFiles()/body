{
  DbAdapter dbHelper=MizuuApplication.getMovieAdapter();
  Cursor cursor=dbHelper.fetchAllMovies(DbAdapter.KEY_TITLE + " ASC",ignoreRemovedFiles,true);
  while (cursor.moveToNext()) {
    existingMovies.put(cursor.getString(cursor.getColumnIndex(DbAdapter.KEY_FILEPATH)),"");
  }
  cursor.close();
  int count=storageDirectories.size();
  for (int i=0; i < count; i++) {
    if (storageDirectories.get(i).getFileSourceType() == FileSource.SMB) {
      if (MizLib.isOnline(getApplicationContext())) {
        try {
          MizFile storageDirectory=new MizFile(new SmbFile(MizLib.createSmbLoginString(URLEncoder.encode(storageDirectories.get(i).getDomain(),"utf-8"),URLEncoder.encode(storageDirectories.get(i).getUser(),"utf-8"),URLEncoder.encode(storageDirectories.get(i).getPassword(),"utf-8"),storageDirectories.get(i).getFilepath(),true)));
          if (storageDirectory.exists())           checkAllDirsAndFiles(storageDirectory);
        }
 catch (        MalformedURLException e) {
        }
catch (        UnsupportedEncodingException e) {
        }
      }
    }
 else {
      MizFile storageDirectory=new MizFile(new File(storageDirectories.get(i).getFilepath()));
      if (storageDirectory.exists())       checkAllDirsAndFiles(storageDirectory);
    }
  }
  for (  Map.Entry<String,MizFile> entry : unique.entrySet())   queue.add(entry.getValue());
  total=queue.size();
  unique.clear();
  existingMovies.clear();
  if (queue.size() > 0) {
    updateNextMovie();
  }
 else {
    mNotificationManager.cancel(NOTIFICATION_ID);
    stopSelf();
  }
}
