{
  final int mImageThumbSize=c.getResources().getDimensionPixelSize(R.dimen.image_thumbnail_size);
  final int mImageThumbSpacing=c.getResources().getDimensionPixelSize(R.dimen.image_thumbnail_spacing);
  WindowManager window=(WindowManager)c.getSystemService(Context.WINDOW_SERVICE);
  Display d=window.getDefaultDisplay();
  Point size=new Point();
  d.getSize(size);
  final int numColumns=(int)Math.floor(Math.max(size.x,size.y) / (mImageThumbSize + mImageThumbSpacing));
  if (numColumns > 0) {
    final int columnWidth=(Math.max(size.x,size.y) / numColumns) - mImageThumbSpacing;
    int imageWidth=0;
    if (columnWidth > 300)     imageWidth=500;
 else     if (columnWidth > 240)     imageWidth=320;
 else     if (columnWidth > 180)     imageWidth=240;
 else     imageWidth=180;
    if (new File(filepath).exists())     try {
      Bitmap bm=decodeSampledBitmapFromFile(filepath,imageWidth,(int)(imageWidth * 1.5));
      bm=Bitmap.createScaledBitmap(bm,imageWidth,(int)(imageWidth * 1.5),true);
      FileOutputStream out=new FileOutputStream(filepath);
      bm.compress(Bitmap.CompressFormat.JPEG,90,out);
      out.close();
      bm.recycle();
    }
 catch (    Exception e) {
    }
  }
}
