{
  mCurrentSort=sort;
  ArrayList<MediumMovie> tempMovies=new ArrayList<MediumMovie>(shownMovies);
switch (sort) {
case TITLE:
    final boolean isCollection=(getActivity().getActionBar().getSelectedNavigationIndex() == 3);
  Collections.sort(tempMovies,new Comparator<MediumMovie>(){
    @Override public int compare(    MediumMovie o1,    MediumMovie o2){
      if (o1 != null && o2 != null) {
        if (isCollection)         return o1.getCollection().compareToIgnoreCase(o2.getCollection());
        return o1.getTitle().compareToIgnoreCase(o2.getTitle());
      }
      return 0;
    }
  }
);
break;
case RELEASE:
Collections.sort(tempMovies,new Comparator<MediumMovie>(){
@Override public int compare(MediumMovie o1,MediumMovie o2){
  try {
    int firstDate=0, secondDate=0;
    String first="", second="";
    if (o1.getReleasedate() != null)     first=o1.getReleasedate().replace("-","").replace(".","").replace("/","");
    if (!(first.equals("null") | first.isEmpty()))     firstDate=Integer.valueOf(first);
    if (o2.getReleasedate() != null)     second=o2.getReleasedate().replace("-","").replace("/","");
    if (!(second.equals("null") | second.isEmpty()))     secondDate=Integer.valueOf(second);
    if (firstDate < secondDate)     return 1;
 else     if (firstDate > secondDate)     return -1;
  }
 catch (  Exception e) {
  }
  return 0;
}
}
);
break;
case RATING:
Collections.sort(tempMovies,new Comparator<MediumMovie>(){
@Override public int compare(MediumMovie o1,MediumMovie o2){
if (o1.getRawRating() < o2.getRawRating()) return 1;
 else if (o1.getRawRating() > o2.getRawRating()) return -1;
return 0;
}
}
);
break;
case WEIGHTED_RATING:
Collections.sort(tempMovies,new Comparator<MediumMovie>(){
@Override public int compare(MediumMovie o1,MediumMovie o2){
if (o1.getWeightedRating() < o2.getWeightedRating()) return 1;
 else if (o1.getWeightedRating() > o2.getWeightedRating()) return -1;
return 0;
}
}
);
break;
case DATE:
Collections.sort(tempMovies,new Comparator<MediumMovie>(){
@Override public int compare(MediumMovie o1,MediumMovie o2){
return o1.getDateAdded().compareTo(o2.getDateAdded()) * -1;
}
}
);
break;
case DURATION:
Collections.sort(tempMovies,new Comparator<MediumMovie>(){
@Override public int compare(MediumMovie o1,MediumMovie o2){
int first=Integer.valueOf(o1.getRuntime());
int second=Integer.valueOf(o2.getRuntime());
if (first < second) return 1;
 else if (first > second) return -1;
return 0;
}
}
);
}
shownMovies=new ArrayList<MediumMovie>(tempMovies);
tempMovies.clear();
tempMovies=null;
}
