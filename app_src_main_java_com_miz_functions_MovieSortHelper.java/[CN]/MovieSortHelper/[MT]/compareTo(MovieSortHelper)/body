{
switch (mSortType) {
case TITLE:
    if (mMovie != null && another.mMovie != null) {
      if (mCollectionsView)       return mMovie.getCollection().compareToIgnoreCase(another.mMovie.getCollection());
      return mMovie.getTitle().compareToIgnoreCase(another.mMovie.getTitle());
    }
  return 0;
case RELEASE:
try {
  int firstDate=0, secondDate=0;
  String first="", second="";
  if (mMovie.getReleasedate() != null)   first=mMovie.getReleasedate().replace("-","").replace(".","").replace("/","");
  if (!TextUtils.isEmpty(first))   firstDate=Integer.valueOf(first);
  if (another.mMovie.getReleasedate() != null)   second=another.mMovie.getReleasedate().replace("-","").replace("/","");
  if (!TextUtils.isEmpty(second))   secondDate=Integer.valueOf(second);
  if (firstDate < secondDate)   return 1;
 else   if (firstDate > secondDate)   return -1;
}
 catch (Exception e) {
}
return 0;
case RATING:
if (mMovie.getRawRating() < another.mMovie.getRawRating()) return 1;
 else if (mMovie.getRawRating() > another.mMovie.getRawRating()) return -1;
return 0;
case WEIGHTED_RATING:
if (mMovie.getWeightedRating() < another.mMovie.getWeightedRating()) return 1;
 else if (mMovie.getWeightedRating() > another.mMovie.getWeightedRating()) return -1;
return 0;
case DATE:
return mMovie.getDateAdded().compareTo(another.mMovie.getDateAdded()) * -1;
case DURATION:
int first=Integer.valueOf(mMovie.getRuntime());
int second=Integer.valueOf(another.mMovie.getRuntime());
if (first < second) return 1;
 else if (first > second) return -1;
return 0;
default :
return 0;
}
}
